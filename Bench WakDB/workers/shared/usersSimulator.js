(function(){	var threads = [];	var result = {};	var initialized = false;	var finishedWs = 0;	var config = {};	onconnect = function(msg)	{		var thePort = msg.ports[0];	    thePort.onmessage = function(event)	    {	        var message = event.data;	        switch (message.type)	        {	            case 'generate':	            	if(initialized){	            		thePort.postMessage({type: 'status', result: result});	            		break;	            	}	            		            	initialized = true;	            		                var data = message.data;	                	                config = data;	                	                for(var i = 0; i< data.nbUsers; i++){	                	var worker = new Worker('workers/dedicated/dataGenerator.js');	                	worker.onmessage = function (event){							var data = event.data;														switch(data.type){								case 'status':									result[data.index] = {										finished: false,										data: data.result									};									break;								case 'finished':									result[data.index] = {										finished: true,										data: data.result									};									finishedWs++;																		if(finishedWs >= data.nbUsers){										initialized = false;									}									break;							}						}						worker.postMessage({type: 'init', data: {index: i, config: data.config}});						threads.push(worker);	                }	                	                thePort.postMessage({type: 'status', result: {data: result, config: config}});	                	                break;	            case 'status':	                	                thePort.postMessage({type: 'status', result: {data: result, config: config}});	                break;	            case 'close':	            	thePort.postMessage({type: 'closed', result: true});	            		            	for(var i = 0,thread; thread = threads[i]; i++){	            		thread.postMessage({type: 'close'});	            	};	            		            	initialized = false;	            	result = {};	            	threads = [];	            	finishedWs = 0;	            		                break;	        }	    }	    thePort.postMessage({type: 'ready'});	}})();