(function() {    var result = {        errors: [],        duration: 0,        generated: {            employees: 0,            companies: 0        }    };        var index;    var T = 10;    var _continue = true;    var index;    var faker = require('faker'),        _ = require('underscore'),        utils = require('utils'),        appFolder = getFolder('path'),        menImgFolder = Folder(appFolder + 'images/men/'),        womenImgFolder = Folder(appFolder + 'images/women/'),        menImgsLength = menImgFolder.files.length,        womenImgsLength = womenImgFolder.files.length,        result = {            errors: [],            duration: 0,            generated: {                employees: 0,                companies: {                	nb: 0,                	emps: 0                }            }        };    function generateCompanies(nb, nbEmps, empConf) {        for (var i = 0; i < nb  && _continue; i++) {            var obj = {                name: faker.Company.companyName(),                address: faker.Address.address()            };            var now = new Date();            var comp = new ds.Company(obj);            try {                comp.save();                result.duration += new Date() - now;                result.generated.companies.nb++;                generateEmployees(nbEmps, empConf, comp);                                result.generated.companies.emps = 0;            }            catch (e) {                result.errors.push({                    type: 'save',                    message: 'The company ' + i + ' cannot be saved!',                    data: comp.toString()                });            }                        if (i % T === 0 && i < nb - 1) {                postMessage({                    type: 'status',                    index: index,                    result: result                });                wait(1);            }        }    };    function generateEmployees(nb, conf, comp) {        for (var i = 0; i < nb && _continue; i++) {            var isMale = i % 2 === 0 ? true : false,                image = (isMale ? menImgFolder.path : womenImgFolder.path) + 'image_' + utils.pad(i % (isMale ? menImgsLength : womenImgsLength) + 1, 3) + '.jpg';            conf = _.deepExtend(conf, {                blobs: true,                asBinary: true            });            if (conf.asBinary) {                image = loadImage(image);            }            var obj = {                firstname: isMale ? faker.Name.maleName() : faker.Name.femaleName(),                lastname: faker.Name.lastName(),                email: faker.Internet.email(),                phone: faker.PhoneNumber.phoneNumber(),                birthdate: faker.Date.youngAdult(),                address: faker.Address.address()            };            if (typeof comp !== 'undefined') {                obj.company = comp;            }            if (conf.blobs) {                obj.image = image;            }            var now = new Date();            var emp = new ds.Employee(obj);            try {                emp.save();                result.duration += new Date() - now;                if(comp){                	result.generated.companies.emps++;                }else{                	result.generated.employees++;                }            }            catch (e) {                result.errors.push({                    type: 'save',                    message: 'The employee ' + i + (typeof comp !== 'undefined' ? 'of the company ' + comp.name : '') + ' cannot be saved!',                    data: emp.toString()                });            }                        if (i % T === 0 && i < nb - 1) {                postMessage({                    type: 'status',                    index: index,                    result: result                });                wait(1);            }        }        return result;    };    function generate(config) {        config = _.deepExtend(config, {            employees: {                nb: 0,                blobs: true,                asBinary: true            },            companies: {                nb: 0,                employees: {                    nb: 0,                    blobs: true,                    asBinary: true                }            }        });        generateEmployees(config.employees.nb, config.employees);        generateCompanies(config.companies.nb, config.companies.employees.nb, config.companies.employees);                postMessage({            type: 'finished',            index: index,            result: result        });    };    onmessage = function(event) {        var data = event.data;        switch (data.type) {        case 'init':            var wConf = data.data;            index = wConf.index;            generate(wConf.config);            break;        case 'close':            _continue = false;            close();            break;        }    }})();